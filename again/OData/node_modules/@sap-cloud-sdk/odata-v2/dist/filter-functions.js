"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterFunctions = exports.substring = exports.length = exports.replace = exports.substringOf = void 0;
const internal_1 = require("@sap-cloud-sdk/odata-common/internal");
const de_serializers_1 = require("./de-serializers");
/* String Functions */
/**
 * Build a filter function to test whether a string is a substring of the other. Evaluates to boolean.
 * @param substr - The substring to test for. This can either be a string, a reference to a field or another filter function.
 * @param str - The string to test. This can either be a string, a reference to a field or another filter function.
 * @returns The newly created filter function.
 */
function substringOf(substr, str) {
    return (0, internal_1.filterFunction)('substringof', 'boolean', substr, str);
}
exports.substringOf = substringOf;
/**
 * Build a filter function to replace the occurrence of a search string with another string. Evaluates to string.
 * @param str - The string to get the index from. This can either be a string, a reference to a field or another filter function.
 * @param searchStr - The substring to get the index for. This can either be a string, a reference to a field or another filter function.
 * @param replaceStr - The substring to get the index for. This can either be a string, a reference to a field or another filter function.
 * @returns The newly created filter function.
 */
function replace(str, searchStr, replaceStr) {
    return (0, internal_1.filterFunction)('replace', 'string', str, searchStr, replaceStr);
}
exports.replace = replace;
/**
 * Export length filter function for backwards compatibility.
 */
exports.length = (0, internal_1.filterFunctions)(de_serializers_1.defaultDeSerializers).length;
/**
 * Export substring filter function for backwards compatibility.
 */
exports.substring = (0, internal_1.filterFunctions)(de_serializers_1.defaultDeSerializers).substring;
/**
 * OData v2 specific filter functions.
 * @param deSerializers - DeSerializer used in the filter.
 * @returns Filter functions object.
 */
function filterFunctions(deSerializers = de_serializers_1.defaultDeSerializers) {
    return {
        ...(0, internal_1.filterFunctions)((0, de_serializers_1.mergeDefaultDeSerializersWith)(deSerializers)),
        substringOf,
        replace
    };
}
exports.filterFunctions = filterFunctions;
//# sourceMappingURL=filter-functions.js.map