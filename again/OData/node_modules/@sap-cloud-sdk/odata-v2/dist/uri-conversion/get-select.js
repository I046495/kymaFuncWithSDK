"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSelect = void 0;
const odata_common_1 = require("@sap-cloud-sdk/odata-common");
/**
 * Get an object containing the given Selectables as query parameter, or an empty object if none were given.
 * This retrieves where in addition to the selection (`select`) there is also an expansion (`expand`) needed.
 * @typeParam EntityT - Type of the entity to get the selection for
 * @param selects - The list of selectables to be transformed to query parameters
 * @returns An object containing the query parameters or an empty object
 * @internal
 */
function getSelect(selects = []) {
    const select = getSelectsAsStrings(selects);
    return select.length ? { select: filterSelects(select).join(',') } : {};
}
exports.getSelect = getSelect;
function selectionLevel(select) {
    return select.split('/').slice(0, -1).join('/');
}
function filterSelects(selects) {
    const allFieldSelects = selects.filter(select => select.endsWith('*'));
    const selectionLevels = allFieldSelects.map(select => selectionLevel(select));
    return [
        ...allFieldSelects,
        ...selects.filter(select => !selectionLevels.includes(selectionLevel(select)))
    ];
}
function getSelectsAsStrings(selectables, initialSelect = [], parent = '') {
    return selectables.reduce((select, selectable) => {
        const fullFieldName = getPath(parent, selectable._fieldName);
        if (selectable instanceof odata_common_1.Link) {
            if (selectable._selects.length) {
                return getSelectsAsStrings(selectable._selects, select, fullFieldName);
            }
            return [...select, `${fullFieldName}/*`];
        }
        return [...select, fullFieldName];
    }, initialSelect);
}
function getPath(parent, fieldName) {
    if (parent) {
        return `${parent}/${fieldName}`;
    }
    return fieldName;
}
//# sourceMappingURL=get-select.js.map