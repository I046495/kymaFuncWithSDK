"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateRequestBuilder = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const internal_1 = require("@sap-cloud-sdk/odata-common/internal");
const extract_odata_etag_1 = require("../extract-odata-etag");
const uri_conversion_1 = require("../uri-conversion");
const logger = (0, util_1.createLogger)({
    package: 'odata-v2',
    messageContext: 'update-request-builder-v2'
});
/**
 * Create OData query to update an entity.
 * @typeParam EntityT - Type of the entity to be updated.
 */
class UpdateRequestBuilder extends internal_1.UpdateRequestBuilderBase {
    /**
     * Creates an instance of UpdateRequestBuilder.
     * @param entityApi - Entity API for building and executing the request.
     * @param _entity - Entity to be updated.
     */
    constructor(entityApi, _entity) {
        super(entityApi, _entity, (0, uri_conversion_1.createODataUri)(entityApi.deSerializers), (0, internal_1.entitySerializer)(entityApi.deSerializers), extract_odata_etag_1.extractODataEtag, removeNavPropsAndComplexTypes);
        this._entity = _entity;
    }
    /**
     * Executes the query.
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to the entity once it was updated.
     */
    async execute(destination) {
        if (this.isEmptyObject(this.requestConfig.payload)) {
            return this._entity;
        }
        const request = await this.build(destination);
        warnIfNavigation(request, this._entity, this._entityApi.schema);
        return super.executeRequest(request);
    }
    /**
     * Execute request and return an {@link @sap-cloud-sdk/http-client!HttpResponse}. The request is only executed if some properties of the entity are modified.
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to an {@link @sap-cloud-sdk/http-client!HttpResponse} when the request is executed or `undefined` otherwise.
     */
    async executeRaw(destination) {
        if (this.isEmptyObject(this.requestConfig.payload)) {
            logger.info('The request is not executed because no properties of the entity are modified.');
            return;
        }
        const request = await this.build(destination);
        warnIfNavigation(request, this._entity, this._entityApi.schema);
        return super.executeRequestRaw(request);
    }
}
exports.UpdateRequestBuilder = UpdateRequestBuilder;
/*
 * In case the entity contains a navigation to a different entity a warning is printed.
 */
function warnIfNavigation(request, entity, schema) {
    const setNavigationProperties = Object.keys(entity).filter(key => !(0, util_1.isNullish)(entity[key]) && (0, internal_1.isNavigationProperty)(key, schema));
    if (setNavigationProperties.length) {
        logger.warn(`The navigation properties ${setNavigationProperties} have been included in your update request. Update of navigation properties is not supported and will be ignored.`);
    }
    return request;
}
function removeNavPropsAndComplexTypes(body) {
    return (0, internal_1.removePropertyOnCondition)(
    // Special handling for null values because 'typeof null' is 'object', but we don't want to filter null values here.
    // See this issue for more info: https://github.com/SAP/cloud-sdk-js/issues/3204
    ([, val]) => val !== null && typeof val === 'object', body);
}
//# sourceMappingURL=update-request-builder.js.map