import { DeSerializers } from '../de-serializers';
import { EntityBase } from '../entity-base';
import { FilterList } from './filter-list';
import type { Filterable } from './filterable';
/**
 * Possible operators used to filter one to many relations in OData v4.
 * Values are `any` or `all`.
 */
export type FilterLambdaOperator = 'any' | 'all';
/**
 * Class representing a filter expression based on a {@link FilterLambdaOperator}.
 */
export declare class FilterLambdaExpression<EntityT extends EntityBase, DeSerializersT extends DeSerializers> {
    filters: FilterList<EntityT, DeSerializersT>;
    lambdaOperator: FilterLambdaOperator;
    constructor(filters: FilterList<EntityT, DeSerializersT>, lambdaOperator: FilterLambdaOperator);
}
/**
 * @internal
 */
export declare function isFilterLambdaExpression<EntityT extends EntityBase, DeSerializersT extends DeSerializers>(filterable: Filterable<EntityT, DeSerializersT>): filterable is FilterLambdaExpression<EntityT, DeSerializersT>;
