import { MethodRequestBuilder } from '../request-builder-base';
import { DeSerializers } from '../../de-serializers';
import { WithBatchReference } from '../../request';
import type { BatchRequestBuilder } from './batch-request-builder';
import { BatchRequestSerializationOptions } from './batch-request-options';
import { BatchChangeSet } from './batch-change-set';
/**
 * Serialize change set to string.
 * @param changeSet - Change set containing a collection of write operations.
 * @param options - Request serialization options.
 * @returns The serialized string representation of a change set.
 * @internal
 */
export declare function serializeChangeSet<DeSerializersT extends DeSerializers>(changeSet: BatchChangeSet<DeSerializersT>, options?: BatchRequestSerializationOptions): string | undefined;
/**
 * Serialize a multipart request to string.
 * @param request - One of {@link GetAllRequestBuilder | getAll}, {@link GetByKeyRequestBuilder | getByKey}, {@link CreateRequestBuilder | create}, {@link UpdateRequestBuilder | update} or {@link DeleteRequestBuilder | delete} request builder.
 * @param options - Request serialization options.
 * @returns The serialized string representation of a multipart request, including the multipart headers.
 * @internal
 */
export declare function serializeRequest(request: AllRequestBuilders, options?: BatchRequestSerializationOptions): string;
type RequestBuildersWithBatchReference = Omit<MethodRequestBuilder, 'execute'> & WithBatchReference;
type AllRequestBuilders = RequestBuildersWithBatchReference | Omit<MethodRequestBuilder, 'execute'>;
/**
 * Serialize a batch request to string. This is used for the batch request payload when executing the request.
 * @param request - Batch request to serialize.
 * @param options - Request serialization options.
 * @returns String representation of the batch request.
 * @internal
 */
export declare function serializeBatchRequest<DeSerializersT extends DeSerializers>(request: BatchRequestBuilder<DeSerializersT>, options?: BatchRequestSerializationOptions): string;
export {};
