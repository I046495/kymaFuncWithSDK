import { EntityBase } from '../entity-base';
import { Expandable } from '../expandable';
import { Selectable } from '../selectable';
import { ODataUri } from '../uri-conversion';
import { DeSerializers } from '../de-serializers';
import { EntityApi } from '../entity-api';
import { WithKeys, WithSelection } from './odata-request-traits';
import { ODataRequestConfig } from './odata-request-config';
/**
 * OData getByKey request configuration for an entity type.
 * @typeParam EntityT - Type of the entity to setup a request for
 */
export declare class ODataGetByKeyRequestConfig<EntityT extends EntityBase, DeSerializersT extends DeSerializers> extends ODataRequestConfig implements WithKeys, WithSelection<EntityT, DeSerializersT> {
    readonly entityApi: EntityApi<EntityT, DeSerializersT>;
    private oDataUri;
    keys: Record<string, any>;
    selects: Selectable<EntityT, DeSerializersT>[];
    expands: Expandable<EntityT, DeSerializersT, EntityApi<EntityBase, DeSerializersT>>[];
    /**
     * Creates an instance of ODataGetByKeyRequestConfig.
     * @param entityApi - Entity API for building and executing the request.
     * @param oDataUri - URI conversion functions.
     */
    constructor(entityApi: EntityApi<EntityT, DeSerializersT>, oDataUri: ODataUri<DeSerializersT>);
    resourcePath(): string;
    queryParameters(): Record<string, any>;
}
