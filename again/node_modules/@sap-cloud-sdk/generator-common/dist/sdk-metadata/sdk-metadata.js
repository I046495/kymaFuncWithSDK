"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceStatusValues = exports.getLevenshteinClosest = exports.getSdkMetadataClient = exports.getSdkMetadataFileNames = void 0;
const fast_levenshtein_1 = __importDefault(require("fast-levenshtein"));
const distanceThreshold = 5;
/**
 * @internal
 */
function getSdkMetadataFileNames(originalFileName) {
    return {
        clientFileName: `${originalFileName}_CLIENT_JS.json`
    };
}
exports.getSdkMetadataFileNames = getSdkMetadataFileNames;
/**
 * @internal
 */
async function getSdkMetadataClient(apiSpecificUsage, generatorVersion, apiType) {
    const status = exports.ServiceStatusValues.verified.status;
    return {
        apiType,
        language: 'JavaScript',
        serviceStatus: status,
        generatorVersion,
        apiSpecificUsage
    };
}
exports.getSdkMetadataClient = getSdkMetadataClient;
/**
 * Gets the closest matching object using Levenshtein distance algorithm.
 * @param name - Name of the service or api class.
 * @param objectsToCheck - List of objects, e.g. VdmEntity, FunctionImports, etc.
 * @param extractorFn - Function to get the object's property to match against name.
 * @returns - closest matched object or undefined if not found.
 * @internal
 */
function getLevenshteinClosest(name, objectsToCheck, extractorFn) {
    const distBelowThreshold = objectsToCheck.reduce((prev, obj) => {
        const levenshteinDist = getLevenshteinDistance(name, extractorFn(obj));
        if (levenshteinDist < distanceThreshold) {
            return [...prev, { dist: levenshteinDist, obj }];
        }
        return prev;
    }, []);
    if (distBelowThreshold.length > 0) {
        return distBelowThreshold.sort((a, b) => (a.dist < b.dist ? -1 : 1))[0].obj;
    }
}
exports.getLevenshteinClosest = getLevenshteinClosest;
function getLevenshteinDistance(a, b) {
    return fast_levenshtein_1.default.get(getSanitizedString(a), getSanitizedString(b));
}
function getSanitizedString(text) {
    return text.replace(/[^A-Za-z]/g, '').toLowerCase();
}
/**
 * @internal
 */
exports.ServiceStatusValues = {
    certified: {
        status: 'certified',
        statusText: 'API Client available for download',
        statusLongText: 'You can download our pregenerated API client for this API.'
    },
    verified: {
        status: 'verified',
        statusText: 'API Client generation tested but no download available',
        statusLongText: 'The SAP Cloud SDK team checked for this API that generating an API client works, but no pregenerated client is available. You can generate your own client for this API.'
    },
    unknown: {
        status: 'unknown',
        statusText: 'API Client generation not tested',
        statusLongText: 'The SAP Cloud SDK team has not tested if generating an API client for this API works. You might try to generate a client for this API if you need one.'
    },
    failed: {
        status: 'failed',
        statusText: 'API Client generation has failed',
        statusLongText: 'The SAP Cloud SDK team checked for this API if generating an API client works, which has failed. You might try it on your own.'
    }
};
//# sourceMappingURL=sdk-metadata.js.map