import { resolveGlob, resolveOptionsPerService, resolvePath, resolveRequiredPath, ServiceType } from './options-parser';
/**
 * @internal
 */
export declare function getCommonCliOptions(serviceType: ServiceType): {
    readonly input: {
        readonly alias: "i";
        readonly describe: string;
        readonly coerce: (arg: string, options: {
            config?: string | undefined;
        }) => string[];
        readonly type: "string";
        readonly demandOption: true;
        readonly requiresArg: true;
    };
    readonly optionsPerService: {
        readonly alias: "s";
        readonly describe: "Configuration file to ensure consistent names between multiple generation runs with updated / changed metadata files. The configuration allows to set a `directoryName` and `npmPackageName` for every service, identified by the path to the original file. It also makes sure that names do not change between generator runs. If a directory is passed, a `options-per-service.json` file is read/created in this directory.";
        readonly type: "string";
        readonly coerce: typeof resolveOptionsPerService;
    };
    readonly clearOutputDir: {
        readonly type: "boolean";
        readonly describe: "Remove all files in the output directory before generation. Be cautious when using this option, as it really removes EVERYTHING in the output directory.";
        readonly default: false;
    };
    readonly include: {
        readonly type: "string";
        readonly coerce: typeof resolveGlob;
        readonly describe: "Include files matching the given glob into the root of each generated client directory.";
        readonly requiresArg: true;
    };
    readonly metadata: {
        readonly describe: "When set to true, SDK metadata for the API hub is generated.";
        readonly type: "boolean";
        readonly default: false;
        readonly hidden: true;
    };
    readonly outputDir: {
        readonly type: "string";
        readonly alias: "o";
        readonly describe: "Specify the path to the directory to generate the client(s) in. Each client is generated into a subdirectory within the given output directory. Creates the directory if it does not exist. Customize subdirectory naming through `--optionsPerService`.";
        readonly coerce: typeof resolveRequiredPath;
        readonly demandOption: true;
        readonly requiresArg: true;
    };
    readonly overwrite: {
        readonly describe: "By default, the generator will exit when encountering a file that already exists. When set to true, it will be overwritten instead. Please note that compared to the --clearOutputDir option, this will not delete outdated files.";
        readonly type: "boolean";
        readonly default: false;
    };
    readonly packageJson: {
        readonly describe: "When enabled, a `package.json` that specifies dependencies and scripts for transpilation is generated.";
        readonly type: "boolean";
        readonly default: false;
    };
    readonly prettierConfig: {
        readonly type: "string";
        readonly alias: "p";
        readonly describe: "Specify the path to the prettier config. If not given a default config will be used for the generated sources.";
        readonly coerce: typeof resolvePath;
        readonly requiresArg: true;
    };
    readonly skipValidation: {
        readonly type: "boolean";
        readonly describe: "By default, the generation fails, when there are duplicate or invalid names in the generated services. Set this to true to enable unique and valid name generation. The names will then be generated by appending numbers and prepending prefixes.";
        readonly default: false;
    };
    readonly transpile: {
        readonly type: "boolean";
        readonly alias: "t";
        readonly describe: "Transpile the generated TypeScript code. When enabled a default `tsconfig.json` will be generated and used. It emits `.js`, `.js.map`, and `.d.ts` files. To configure transpilation set `--tsconfig`.";
        readonly default: false;
    };
    readonly tsconfig: {
        readonly describe: "Replace the default `tsconfig.json` by passing a path to a custom config. By default, a `tsconfig.json` is only generated, when transpilation is enabled (`--transpile`). If a directory is passed, a `tsconfig.json` file is read from this directory.";
        readonly type: "string";
        readonly coerce: typeof resolvePath;
    };
    readonly verbose: {
        readonly describe: "By default, only errors, warnings and important info logs will be displayed. If set to true, all logs will be displayed.";
        readonly type: "boolean";
        readonly default: false;
    };
    readonly readme: {
        readonly type: "boolean";
        readonly describe: string;
        readonly default: false;
        readonly hidden: true;
    };
};
/**
 * Generator options shared by the OData and OpenApi generator.
 */
export interface CommonGeneratorOptions {
    /**
     * Specify the path to the directory or file containing the service definition(s) to generate clients for.
     * Throws an error if the path does not exist.
     */
    input: string;
    /**
     * Configuration file to ensure consistent names between multiple generation runs with updated / changed metadata files.
     * The configuration allows to set a `directoryName` and `npmPackageName` for every service, identified by the path to the original file.
     * It also makes sure that names do not change between generator runs.
     * If a directory is passed, a `options-per-service.json` file is read/created in this directory.
     */
    optionsPerService?: string;
    /**
     * Delete EVERYTHING in the specified output directory before generating code.
     */
    clearOutputDir?: boolean;
    /**
     * Include files matching the given glob into the root of each generated client directory.
     */
    include?: string;
    /**
     * Hidden option only for internal usage - generate metadata for API hub integration.
     */
    metadata?: boolean;
    /**
     * Directory to save the generated code in.
     */
    outputDir: string;
    /**
     * Generate a `package.json` file, specifying dependencies and scripts for compiling.
     */
    packageJson?: boolean;
    /**
     * Exit when encountering a file that already exists.
     * When set to true, it will be overwritten instead.
     * Note, that compared to the `clearOutputDir` option, this will not delete outdated files.
     */
    overwrite?: boolean;
    /**
     * By default, only errors, warnings and important info logs will be displayed.
     * If set to true, all logs will be displayed.
     */
    verbose?: boolean;
    /**
     * Generation will stop if objects need renaming due to non-unique conditions or conflicts to JavaScript keywords.
     * If you enable this option, conflicts are resolved by appending postfixes like '_1".
     */
    skipValidation?: boolean;
    /**
     * When enabled, generates transpiled `.js`, `.js.map`, and `.d.ts` files.
     * By default, only `.ts` files are generated.
     */
    transpile?: boolean;
    /**
     * Replace the default `tsconfig.json` by passing a path to a custom configuration.
     * By default, a `tsconfig.json` is only generated when transpilation is enabled (`transpile`).
     * If a directory is passed, a `tsconfig.json` file is read from this directory.
     */
    tsconfig?: string;
    /**
     * Specify the path to the prettier config. If not given a default config will be used for the generated sources.
     */
    prettierConfig?: string;
    /**
     * Generate default `README.md` files in the client directories.
     */
    readme?: boolean;
}
