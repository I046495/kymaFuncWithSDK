import { InferredOptionType, Options as YargsOption } from 'yargs';
/**
 * @internal
 */
export type ServiceType = 'OData' | 'OpenApi';
/**
 * @internal
 * CLI options type, based on generator options type.
 */
export type Options<GeneratorOptionsT> = {
    [K in keyof GeneratorOptionsT]: Option<GeneratorOptionsT[K]>;
};
/**
 * @internal
 * Options for SAP Cloud SDK generators.
 * Some keys are modified, for more explicit parsing.
 */
export type Option<T = any> = Omit<YargsOption, 'coerce'> & {
    /**
     * Name of the option the current option was replaced with.
     */
    replacedBy?: string;
    /**
     * Only required options should set `demandOption`. Other options are not required by default.
     */
    demandOption?: true;
    /**
     * Coerce function with additional parameter for all options.
     */
    coerce?: (arg: T, options: any) => any;
} & Required<Pick<YargsOption, 'describe' | 'type'>>;
/**
 * @internal
 * Helper to represent parsed options based on a public generator options type and a CLI options configuration.
 * - Makes all properties required.
 * - Removes deprecated and replaced options.
 * - Sets default values.
 * - Replaces input types with coerced types.
 * @typeParam GeneratorOptionsOptionsT - Public generator options.
 * @typeParam CliOptionsT - Configuration of CLI options.
 */
export type ParsedOptions<CliOptionsT extends Record<string, Option>> = Omit<{
    [K in keyof CliOptionsT]: ParsedOptionType<CliOptionsT[K]>;
}, OptionsWith<'deprecated' | 'replacedBy', CliOptionsT>>;
type ParsedOptionType<OptionT extends Option> = OptionT extends {
    coerce: (...arg: any) => infer ReturnT;
} ? ReturnT : InferredOptionType<Omit<OptionT, 'coerce'>>;
/**
 * Union type of the options that specify the given property name.
 * @typeParam OptionPropertyT - The literal name of the property in each option.
 * @typeParam CliOptionsT - Configuration of CLI options.
 */
type OptionsWith<OptionPropertyT extends keyof Option, CliOptionsT extends Record<string, Option>> = {
    [K in keyof CliOptionsT]: CliOptionsT[K] extends Record<OptionPropertyT, any> ? K : never;
}[keyof CliOptionsT];
/**
 * Resolves a string using glob notation.
 * If a config is given in generatorOptions, the glob working directory is considered relative to this config.
 * @internal
 * @param arg - Value for the string for which the glob is resolved.
 * @param options - Generator options.
 */
export declare function resolveGlob<GeneratorOptionsT>(arg: string | undefined, options: GeneratorOptionsT & {
    config?: string;
}): string[];
/**
 * Resolves arguments that represent paths to an absolute path as a `string`. Only works for required options.
 * @internal
 * @param arg - Path argument as passed by the user.
 * @param options - Options as passed by the user.
 * @returns Absolute path as a `string`.
 */
export declare function resolveRequiredPath<GeneratorOptionsT>(arg: string, options: GeneratorOptionsT & {
    config?: string;
}): string;
/**
 * Builds a glob resolver function for OData or OpenApi
 * @internal
 * @param serviceType - For which service the glob resolver is build.
 * @returns Function for resolving inputs Globs for OData or Openapi
 */
export declare function buildResolveInputGlob<GeneratorOptionsT>(serviceType?: ServiceType): (arg: string, options: GeneratorOptionsT & {
    config?: string;
}) => string[];
/**
 * Recursively searches through a given input path and returns all file paths as a string array.
 * @param input - the path to the input directory.
 * @returns all file paths as a string array.
 * @internal
 */
export declare function getInputFilePaths(input: string, serviceType?: ServiceType): string[];
/**
 * Resolve the optionsPerService. If a directory is given the default name 'options-per-service.json' is used.
 * @internal
 * @param arg
 * @param options
 */
export declare function resolveOptionsPerService<GeneratorOptionsT>(arg: string, options: GeneratorOptionsT & {
    config?: string;
}): string | undefined;
/**
 * Same as `resolveRequiredPath`, but for non-required options.
 * @internal
 * @param arg - Path argument as passed by the user, or `undefined` if nothing was passed.
 * @param options - Options as passed by the user.
 * @returns Absolute path as a `string` or `undefined`.
 */
export declare function resolvePath<GeneratorOptionsT>(arg: string | undefined, options: GeneratorOptionsT & {
    config?: string;
}): string | undefined;
/**
 * @internal
 * Remove defaults from CLI options. This is necessary to handle default setting on our own.
 * @param options - CLI options, record, that maps option name to option config.
 * @returns CLI options without default values.
 */
export declare function getOptionsWithoutDefaults<CliOptionsT extends Record<string, Option>>(options: CliOptionsT): {
    [K in keyof CliOptionsT]: Omit<CliOptionsT[K], 'default' | 'coerce'>;
};
/**
 * @internal
 * Parse options for programmatic and CLI use.
 * Warn, if deprecated options are used or duplicate.
 * Adds defaults for options not set by the user.
 * @param options - Available CLI options along with their configuration.
 * @param userOptions - Options as set by user, either through the CLI or programmatically.
 * @returns Parsed options with default values.
 */
export declare function parseOptions<CliOptionsT extends Record<string, Option>, GeneratorOptionsT extends Partial<Record<keyof CliOptionsT, any>>>(options: CliOptionsT, userOptions: GeneratorOptionsT): ParsedOptions<CliOptionsT>;
export {};
