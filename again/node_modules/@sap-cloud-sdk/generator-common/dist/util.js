"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.directoryToServiceName = exports.directoryToSpeakingModuleName = exports.npmCompliantName = exports.validateNpmCompliance = exports.getCopyrightHeader = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const voca_1 = __importDefault(require("voca"));
/**
 * @returns A copyright header
 * @internal
 */
function getCopyrightHeader() {
    return (0, util_1.codeBlock) `
/*
 * Copyright (c) ${new Date().getFullYear()} SAP SE or an SAP affiliate company. All rights reserved.
 *
 * This is a generated file powered by the SAP Cloud SDK for JavaScript.
 */
 `;
}
exports.getCopyrightHeader = getCopyrightHeader;
const logger = (0, util_1.createLogger)('generator-common-util');
const npmMaxLength = 214;
const npmRegex = /^(?:@[a-z0-9-~][a-z0-9-._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/;
/**
 * Checks whether a name is compliant with npm naming rules. Logs a warning if not.
 * @param packageName - The name to be checked.
 * @internal
 */
function validateNpmCompliance(packageName) {
    if (packageName.length > npmMaxLength) {
        logger.warn(`Provided package name "${packageName}" is longer than 214 chars and will be cut!`);
    }
    if (!isCompliant(packageName)) {
        const newPackageName = npmCompliantName(packageName);
        logger.warn(`Provided package name "${packageName}" is not compliant with npm naming rules and was transformed to ${newPackageName}!`);
    }
}
exports.validateNpmCompliance = validateNpmCompliance;
/**
 * Takes a name and returns a transformation that is guaranteed to be compliant with npm naming rules.
 * @param packageName - The name to be transformed, if necessary.
 * @returns Name that is guaranteed to be npm compliant.
 * @internal
 */
function npmCompliantName(packageName) {
    packageName = packageName.substring(0, npmMaxLength);
    return isScoped(packageName)
        ? transformScopedName(packageName)
        : transformUnscopedName(packageName);
}
exports.npmCompliantName = npmCompliantName;
function isCompliant(packageName) {
    return !!npmRegex.exec(packageName);
}
function isScoped(packageName) {
    return packageName.startsWith('@') && packageName.includes('/');
}
function transformScopedName(packageName) {
    return ('@' +
        splitAtFirstOccurrence(packageName, '/')
            .map(scopeOrName => transformUnscopedName(scopeOrName))
            .join('/'));
}
function transformUnscopedName(packageName) {
    let compliantName = packageName.toLowerCase();
    compliantName = stripLeadingDotsAndUnderscores(compliantName);
    compliantName = replaceNonNpmPackageCharacters(compliantName);
    return compliantName;
}
/**
 * This is taken from version 2.0
 * @internal
 */
function directoryToSpeakingModuleName(packageName) {
    return voca_1.default.titleCase(packageName.replace(/[-,_]/g, ' '));
}
exports.directoryToSpeakingModuleName = directoryToSpeakingModuleName;
/**
 * This is taken from version 2.0
 * @internal
 */
function directoryToServiceName(name) {
    return `${directoryToSpeakingModuleName(name).replace(/ /g, '')}`;
}
exports.directoryToServiceName = directoryToServiceName;
function stripLeadingDotsAndUnderscores(str) {
    return str.replace(/^[._]*/g, '');
}
function replaceNonNpmPackageCharacters(str) {
    return str.replace(/[^a-z0-9-~._]/g, '');
}
function splitAtFirstOccurrence(str, separator) {
    return [
        str.slice(0, str.indexOf(separator)),
        str.slice(str.indexOf(separator) + 1)
    ];
}
//# sourceMappingURL=util.js.map