import { CompilerOptions } from 'typescript';
import { CreateFileOptions } from './file-writer';
/**
 * Executes the TypeScript compilation for the given directory.
 * It recursively compiles all files ending with .ts
 * @param path - Directory to be compiled.
 * @param compilerOptions - Compiler options to be used
 * @param includeExclude - Included and excluded files for compilation
 * @internal
 */
export declare function transpileDirectory(path: string, { compilerOptions, createFileOptions }: {
    compilerOptions: CompilerOptions;
    createFileOptions: CreateFileOptions;
}, includeExclude?: IncludeExclude): Promise<void>;
interface IncludeExclude {
    include: string[];
    exclude: string[];
}
/**
 * Reads the include and exclude property from the tsconfig.json using  ['**\/*.ts'] and ["dist/**\/*", "**\/*.spec.ts", "**\/*.d.ts", "node_modules/**\/*"] as default values.
 * @param pathToTsConfig - Folder containing or path to a tsconfig.json files
 * @returns IncludeExclude options for include and exclude files for compilation
 * @internal
 */
export declare function readIncludeExcludeWithDefaults(pathToTsConfig: string): Promise<IncludeExclude | undefined>;
/**
 * Reads and parses the compiler options a tsconfig.json.
 * @param pathToTsConfig - Folder containing or path to a tsconfig.json files
 * @returns Compiler options from the tsconfig.json
 * @internal
 */
export declare function readCompilerOptions(pathToTsConfig: string): Promise<CompilerOptions>;
export {};
