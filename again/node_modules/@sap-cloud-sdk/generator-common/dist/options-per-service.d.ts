/**
 * Represents the service options for all services, mapped from the input file path to the service configuration.
 * @internal
 */
export type OptionsPerService = Record<string, ServiceOptions>;
/**
 * Partial OptionsPerService.
 */
type PartialOptionsPerService = Record<string, Partial<ServiceOptions>>;
/**
 * Represents the options for one service.
 * This is usually specified as part of the options per service.
 * @internal
 */
export interface ServiceOptions {
    /**
     * Name of the directory to store the service in.
     */
    directoryName: string;
    /**
     * Name of the package to reference in the package.json.
     */
    packageName: string;
    /**
     * Base path for the request.
     */
    basePath?: string;
}
/**
 * Get the options per service from the given path or an empty object if no path was given.
 * @param configPath - Path to the given per service configuration or `undefined`, if no path was given.
 * @returns The parsed configuration for all services.
 * @internal
 */
export declare function getOriginalOptionsPerService(configPath: string | undefined): Promise<PartialOptionsPerService>;
/**
 * Get the options per service for given service specifications.
 * If optionsPerBasePath is not given, default values are used for the services.
 * If optionsPerBasePath is given, existing values for the services are used.
 * @param inputPaths - Service spec file paths.
 * @param options - Generator options.
 * @returns The parsed options per service.
 * @internal
 */
export declare function getOptionsPerService(inputPaths: string[], { optionsPerService, skipValidation }: {
    skipValidation: boolean;
    optionsPerService: string | undefined;
}): Promise<OptionsPerService>;
/**
 * Gives the relative path with respect to process.cwd() using posix file separator '/'.
 * @param absolutePath - The absolute path
 * @returns The relative path
 * @internal
 */
export declare function getRelPathWithPosixSeparator(absolutePath: string): string;
/**
 * Get the options for one service based on the options per service and the input file path.
 * If the file path does not exist in the options a default config is created.
 * If the service options for a file path are given only partially, default values are added for the missing values.
 * @param directoryName - The directory name of the according service.
 * @param serviceOptions - The original options for this service as specified in the per service options.
 * @returns Service options.
 * @internal
 */
export declare function getServiceOptions(directoryName: string, skipValidation: boolean, serviceOptions?: Partial<ServiceOptions>): ServiceOptions;
/**
 * @internal
 */
export declare function writeOptionsPerService(filePath: string, optionsPerService: OptionsPerService, options: {
    prettierConfig: string | undefined;
}): Promise<void>;
export {};
