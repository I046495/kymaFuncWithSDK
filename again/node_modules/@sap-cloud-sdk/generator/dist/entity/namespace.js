"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropertyFieldType = exports.createPropertyFieldType = exports.createPropertyFieldInitializerForEntity = exports.entityNamespace = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const ts_morph_1 = require("ts-morph");
const odata_common_1 = require("@sap-cloud-sdk/odata-common");
const generator_utils_1 = require("../generator-utils");
const internal_prefix_1 = require("../internal-prefix");
const typedoc_1 = require("../typedoc");
/**
 * @internal
 */
function entityNamespace(entity, service) {
    return {
        kind: ts_morph_1.StructureKind.Module,
        name: entity.className,
        isExported: true,
        statements: [
            fieldBuilderInitializer(entity),
            ...properties(entity),
            ...navigationProperties(entity, service),
            allFields(entity, service),
            allFieldSelector(entity),
            keyFields(entity),
            keys(entity)
        ]
    };
}
exports.entityNamespace = entityNamespace;
function fieldBuilderInitializer(entity) {
    return {
        kind: ts_morph_1.StructureKind.VariableStatement,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [
            {
                name: '_fieldBuilder',
                type: `FieldBuilder<Constructable<${entity.className}>>`,
                initializer: `new FieldBuilder(${entity.className})`
            }
        ],
        isExported: false
    };
}
function properties(entity) {
    return entity.properties.map(prop => property(prop));
}
function getFieldInitializer(prop) {
    return {
        name: prop.staticPropertyName,
        initializer: createPropertyFieldInitializerForEntity(prop)
    };
}
/**
 * @internal
 */
function createPropertyFieldInitializerForEntity(prop, fieldBuilderName = '_fieldBuilder') {
    if (prop.isCollection) {
        if (prop.isComplex) {
            return `${fieldBuilderName}.buildCollectionField('${prop.originalName}', ${prop.jsType}, ${prop.nullable})`;
        }
        if (prop.isEnum) {
            return `${fieldBuilderName}.buildCollectionField('${prop.originalName}', ${prop.jsType}, ${prop.nullable})`;
        }
        return `${fieldBuilderName}.buildCollectionField('${prop.originalName}', '${prop.edmType}', ${prop.nullable})`;
    }
    if (prop.isComplex) {
        return `${fieldBuilderName}.buildComplexTypeField('${prop.originalName}', ${prop.fieldType}, ${prop.nullable})`;
    }
    if (prop.isEnum) {
        return `${fieldBuilderName}.buildEnumField('${prop.originalName}', ${prop.jsType}, ${prop.nullable})`;
    }
    return `${fieldBuilderName}.buildEdmTypeField('${prop.originalName}', '${prop.edmType}', ${prop.nullable})`;
}
exports.createPropertyFieldInitializerForEntity = createPropertyFieldInitializerForEntity;
/**
 * @internal
 */
function createPropertyFieldType(className, prop) {
    if (prop.isCollection) {
        if (prop.isComplex) {
            return `CollectionField<${className}<DeSerializers>, DeSerializersT, ${prop.jsType}, ${prop.nullable}, true>`;
        }
        if (prop.isEnum) {
            return `CollectionField<${className}<DeSerializers>, DeSerializersT, typeof ${prop.jsType}, ${prop.nullable}, true>`;
        }
        return `CollectionField<${className}<DeSerializers>, DeSerializersT, '${prop.edmType}', ${prop.nullable}, true>`;
    }
    if (prop.isComplex) {
        return `${prop.fieldType}<${className}<DeSerializers>, DeSerializersT, ${prop.nullable}, true>`;
    }
    if (prop.isEnum) {
        return `EnumField<${className}<DeSerializers>, DeSerializersT, ${prop.jsType}, ${prop.nullable}, true>`;
    }
    const isOrderable = (0, odata_common_1.isOrderableEdmType)(prop.edmType);
    return `${isOrderable ? 'OrderableEdmTypeField' : 'EdmTypeField'}<${className}<DeSerializers>, DeSerializersT, '${prop.edmType}', ${prop.nullable}, true>`;
}
exports.createPropertyFieldType = createPropertyFieldType;
/**
 * @internal
 */
function getPropertyFieldType(entity, prop, fieldBuilderName = '_fieldBuilder') {
    if (prop.isCollection) {
        if (prop.isComplex) {
            return `CollectionField<${entity.className}, DeSerializersT, ${prop.jsType}, ${prop.nullable}, true>`;
        }
        if (prop.isEnum) {
            return `CollectionField<${entity.className}, DeSerializersT, string, ${prop.nullable}, true>`;
        }
        return `CollectionField<${entity.className}, DeSerializersT, DeSerializedType<DeSerializersT,, ${prop.nullable}, true>`;
    }
    if (prop.isComplex) {
        return `${fieldBuilderName}.buildComplexTypeField('${prop.originalName}', ${prop.fieldType}, ${prop.nullable})`;
    }
    if (prop.isEnum) {
        return `${fieldBuilderName}.buildEnumField('${prop.originalName}', ${prop.jsType}, ${prop.nullable})`;
    }
    return `${fieldBuilderName}.buildEdmTypeField('${prop.originalName}', '${prop.edmType}', ${prop.nullable})`;
}
exports.getPropertyFieldType = getPropertyFieldType;
function property(prop) {
    return {
        kind: ts_morph_1.StructureKind.VariableStatement,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [getFieldInitializer(prop)],
        docs: [(0, typedoc_1.getStaticPropertyDescription)(prop)],
        isExported: true
    };
}
function navigationProperties(entity, service) {
    return entity.navigationProperties.map(navProp => navigationProperty(navProp, entity, service));
}
function navigationProperty(navProp, entity, service) {
    const matchedEntity = service.entities.find(e => e.entitySetName === navProp.to);
    if (!matchedEntity) {
        throw Error(`Failed to find the entity from the service: ${JSON.stringify(service)} for nav property ${navProp}`);
    }
    const toEntity = matchedEntity.className;
    return {
        kind: ts_morph_1.StructureKind.VariableStatement,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [
            {
                name: navProp.staticPropertyName,
                type: `${(0, generator_utils_1.linkClass)(navProp, service.oDataVersion)}<${entity.className},${toEntity}>`,
                initializer: `new ${(0, generator_utils_1.linkClass)(navProp, service.oDataVersion)}('${navProp.originalName}', ${entity.className}, ${toEntity})`
            }
        ],
        docs: [(0, typedoc_1.getStaticNavPropertyDescription)(navProp)],
        isExported: true
    };
}
function allFields(entity, service) {
    const fieldTypes = (0, util_1.unique)([
        ...entity.properties.map(p => `${p.fieldType}<${(0, generator_utils_1.getGenericParameters)(entity.className, p, true)}>`),
        ...entity.navigationProperties.map(p => `${(0, generator_utils_1.linkClass)(p, service.oDataVersion)}<${entity.className},${p.toEntityClassName}>`)
    ]);
    return {
        kind: ts_morph_1.StructureKind.VariableStatement,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [
            {
                name: (0, internal_prefix_1.prependPrefix)('allFields'),
                type: `Array<${fieldTypes.join(' | ')}>`,
                initializer: `[
          ${entity.properties
                    .map(prop => prop.staticPropertyName)
                    .concat(entity.navigationProperties.map(navProp => navProp.staticPropertyName))
                    .map(name => `${entity.className}.${name}`)
                    .join(`, ${util_1.unixEOL}`)}
          ]`
            }
        ],
        docs: [(0, typedoc_1.addLeadingNewline)(`All fields of the ${entity.className} entity.`)],
        isExported: true
    };
}
function allFieldSelector(entity) {
    return {
        kind: ts_morph_1.StructureKind.VariableStatement,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [
            {
                name: 'ALL_FIELDS',
                type: `AllFields<${entity.className}>`,
                initializer: `new AllFields('*', ${entity.className})`
            }
        ],
        docs: [(0, typedoc_1.addLeadingNewline)('All fields selector.')],
        isExported: true
    };
}
function keyFields(entity) {
    return {
        kind: ts_morph_1.StructureKind.VariableStatement,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [
            {
                name: (0, internal_prefix_1.prependPrefix)('keyFields'),
                type: `Array<Field<${entity.className}, boolean, boolean>>`,
                initializer: '[' +
                    entity.keys
                        .map(key => `${entity.className}.${key.staticPropertyName}`)
                        .join(', ') +
                    ']'
            }
        ],
        docs: [
            (0, typedoc_1.addLeadingNewline)(`All key fields of the ${entity.className} entity.`)
        ],
        isExported: true
    };
}
function keys(entity) {
    return {
        kind: ts_morph_1.StructureKind.VariableStatement,
        declarationKind: ts_morph_1.VariableDeclarationKind.Const,
        declarations: [
            {
                name: (0, internal_prefix_1.prependPrefix)('keys'),
                type: `{[keys: string]: Field<${entity.className}, boolean, boolean>}`,
                initializer: `${entity.className}.${(0, internal_prefix_1.prependPrefix)('keyFields')}.reduce((acc: {[keys: string]: Field<${entity.className}, boolean, boolean>}, field: Field<${entity.className}, boolean, boolean>) => {
          acc[field._fieldName] = field;
          return acc;
        }, {})`
            }
        ],
        docs: [
            (0, typedoc_1.addLeadingNewline)(`Mapping of all key field names to the respective static field property ${entity.className}.`)
        ],
        isExported: true
    };
}
//# sourceMappingURL=namespace.js.map