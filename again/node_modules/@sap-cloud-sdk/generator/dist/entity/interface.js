"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.entityTypeInterface = void 0;
const ts_morph_1 = require("ts-morph");
const class_1 = require("./class");
/**
 * @internal
 */
function entityTypeInterface(entity, service) {
    return {
        kind: ts_morph_1.StructureKind.Interface,
        name: `${entity.className}Type<T extends DeSerializers = DefaultDeSerializers>`,
        isExported: true,
        properties: [...properties(entity), ...navProperties(entity, service)]
    };
}
exports.entityTypeInterface = entityTypeInterface;
function properties(entity) {
    return entity.properties.map(prop => property(prop));
}
function property(prop) {
    return {
        kind: ts_morph_1.StructureKind.PropertySignature,
        name: prop.instancePropertyName + (prop.nullable ? '?' : ''),
        type: (0, class_1.getPropertyType)(prop)
    };
}
function navProperties(entity, service) {
    return entity.navigationProperties.map(navProp => navProperty(navProp, service));
}
function navProperty(navProp, service) {
    const entity = service.entities.find(e => e.entitySetName === navProp.to);
    if (!entity) {
        throw Error(`Failed to find the entity from the service: ${JSON.stringify(service)} for nav property ${navProp}`);
    }
    return {
        kind: ts_morph_1.StructureKind.PropertySignature,
        name: navProp.instancePropertyName + (navProp.isCollection ? '' : '?'),
        type: entity.className + 'Type<T>' + (navProp.isCollection ? '[]' : ' | null')
    };
}
//# sourceMappingURL=interface.js.map