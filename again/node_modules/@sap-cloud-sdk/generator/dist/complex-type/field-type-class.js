"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPropertyFieldInitializer = exports.fieldTypeClass = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const ts_morph_1 = require("ts-morph");
const generator_utils_1 = require("../generator-utils");
const typedoc_1 = require("../typedoc");
/**
 * @internal
 */
function fieldTypeClass(complexType) {
    return {
        kind: ts_morph_1.StructureKind.Class,
        name: `${complexType.fieldType}<EntityT extends Entity, DeSerializersT extends DeSerializers = DefaultDeSerializers, NullableT extends boolean = false, SelectableT extends boolean = false>`,
        extends: `ComplexTypeField<EntityT, DeSerializersT, ${complexType.typeName}, NullableT, SelectableT>`,
        isExported: true,
        properties: [
            {
                kind: ts_morph_1.StructureKind.Property,
                scope: ts_morph_1.Scope.Private,
                name: '_fieldBuilder',
                type: 'FieldBuilder<this, DeSerializersT>',
                initializer: 'new FieldBuilder(this, this.deSerializers)'
            },
            ...properties(complexType)
        ],
        docs: [(0, typedoc_1.getComplexTypeFieldDescription)(complexType)],
        ctors: [
            {
                parameters: [
                    {
                        name: 'fieldName',
                        type: 'string'
                    },
                    {
                        name: 'fieldOf',
                        type: 'ConstructorOrField<EntityT>'
                    },
                    {
                        name: 'deSerializers',
                        type: 'DeSerializersT'
                    },
                    {
                        name: 'fieldOptions',
                        type: 'FieldOptions<NullableT, SelectableT>',
                        hasQuestionToken: true
                    }
                ],
                docs: [
                    `${util_1.unixEOL}Creates an instance of ${complexType.fieldType}.${util_1.unixEOL}@param fieldName - Actual name of the field as used in the OData request.${util_1.unixEOL}@param fieldOf - Either the parent entity constructor of the parent complex type this field belongs to.`
                ],
                statements: [
                    `super(fieldName, fieldOf, deSerializers, ${complexType.typeName}, fieldOptions);`
                ]
            }
        ]
    };
}
exports.fieldTypeClass = fieldTypeClass;
function properties(complexType) {
    return complexType.properties.map((prop) => property(prop, complexType));
}
function property(prop, complexType) {
    return {
        kind: ts_morph_1.StructureKind.Property,
        name: prop.instancePropertyName,
        type: `${prop.fieldType}<${(0, generator_utils_1.getGenericParameters)('EntityT', prop, false)}>`,
        initializer: createPropertyFieldInitializer(prop),
        docs: [(0, typedoc_1.getComplexTypePropertyDescription)(prop, complexType.typeName)]
    };
}
/**
 * @internal
 */
function createPropertyFieldInitializer(prop) {
    if (prop.isCollection) {
        if (prop.isEnum) {
            return `this._fieldBuilder.buildCollectionField('${prop.originalName}', ${prop.jsType}, ${prop.nullable})`;
        }
        if (prop.isComplex) {
            return `this._fieldBuilder.buildCollectionField('${prop.originalName}', ${prop.jsType}, ${prop.nullable})`;
        }
        return `this._fieldBuilder.buildCollectionField('${prop.originalName}', '${prop.edmType}', ${prop.nullable})`;
    }
    if (prop.isComplex) {
        return `this._fieldBuilder.buildComplexTypeField('${prop.originalName}', ${prop.fieldType}, ${prop.nullable})`;
    }
    if (prop.isEnum) {
        return `this._fieldBuilder.buildEnumField('${prop.originalName}', ${prop.jsType}, ${prop.nullable})`;
    }
    return `this._fieldBuilder.buildEdmTypeField('${prop.originalName}', '${prop.edmType}', ${prop.nullable})`;
}
exports.createPropertyFieldInitializer = createPropertyFieldInitializer;
//# sourceMappingURL=field-type-class.js.map