"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFunctionImportsV2 = void 0;
const operation_1 = require("../common/operation");
const operation_return_type_1 = require("../common/operation-return-type");
const swagger_parser_1 = require("../../swagger-parser/swagger-parser");
const edmx_parser_1 = require("../../edmx-parser/v2/edmx-parser");
const edmx_to_vdm_util_1 = require("../edmx-to-vdm-util");
const extractResponse = (functionName) => (response) => `${response}.${functionName}`;
/**
 * @internal
 */
function generateFunctionImportsV2(serviceMetadata, serviceName, entities, complexTypes, formatter) {
    const edmxFunctionImports = (0, edmx_parser_1.parseFunctionImportsV2)(serviceMetadata.edmx.root);
    return (edmxFunctionImports
        // TODO 1571 remove when supporting entity type as parameter
        .filter(functionImport => !(0, edmx_to_vdm_util_1.hasUnsupportedParameterTypes)(functionImport))
        .map(f => {
        const httpMethod = f['m:HttpMethod'].toLowerCase();
        const swaggerDefinition = (0, swagger_parser_1.getSwaggerDefinitionForOperation)(f.Name, httpMethod, serviceMetadata.swagger);
        return {
            ...(0, operation_1.transformOperationBase)(f, f.Parameter, 'function', swaggerDefinition, formatter, undefined // oData v2 does not have bound functions
            ),
            httpMethod,
            returnType: (0, operation_return_type_1.parseOperationReturnType)(f.ReturnType
                ? { Type: f.ReturnType, Nullable: 'false' }
                : undefined, entities, complexTypes, extractResponse(f.Name), serviceName, false)
        };
    }));
}
exports.generateFunctionImportsV2 = generateFunctionImportsV2;
//# sourceMappingURL=function-import.js.map