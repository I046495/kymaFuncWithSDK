import { EdmxEntitySetBase, EdmxEntityTypeBase, JoinedEntityMetadata } from '../../edmx-parser/common';
import { ServiceNameFormatter } from '../../service-name-formatter';
import { SwaggerMetadata } from '../../swagger-parser/swagger-types';
import { VdmComplexType, VdmEntity, VdmEnumType, VdmNavigationProperty } from '../../vdm-types';
/**
 * @internal
 */
export declare function transformEntityBase(entityMetadata: JoinedEntityMetadata<EdmxEntitySetBase, any>, classNames: Record<string, any>, complexTypes: VdmComplexType[], enumTypes: VdmEnumType[], formatter: ServiceNameFormatter): Omit<VdmEntity, 'navigationProperties' | 'operations'>;
/**
 * @internal
 */
export declare function joinEntityMetadata<EntitySetT extends EdmxEntitySetBase, EntityTypeT extends EdmxEntityTypeBase<any>>(entitySets: EntitySetT[], entityTypes: EntityTypeT[], swagger?: SwaggerMetadata): JoinedEntityMetadata<EntitySetT, EntityTypeT>[];
/**
 * @internal
 */
export declare function navigationPropertyBase(navPropName: string, entitySetName: string, formatter: ServiceNameFormatter): Pick<VdmNavigationProperty, 'originalName' | 'instancePropertyName' | 'staticPropertyName' | 'propertyNameAsParam'>;
/**
 * @internal
 */
export declare function createEntityClassNames(entityMetadata: JoinedEntityMetadata<EdmxEntitySetBase, any>[], formatter: ServiceNameFormatter): Record<string, string>;
