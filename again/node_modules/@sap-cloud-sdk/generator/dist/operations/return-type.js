"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationReturnType = void 0;
const common_1 = require("../edmx-to-vdm/common");
/**
 * @internal
 */
function operationReturnType({ returnType, parametersTypeName, isBound, name, entityClassName }) {
    let type = returnType.returnType;
    const requestBuilderName = `${isBound ? 'Bound' : ''}OperationRequestBuilder`;
    if ((0, common_1.cannotDeserialize)(returnType)) {
        type = wrapRequestBuilderAroundType(requestBuilderName, parametersTypeName, type);
        type = `Omit<${type}, 'execute'>`;
        return type;
    }
    if (returnType.isCollection) {
        type = `${type}[]`;
    }
    if (returnType.isNullable) {
        type = `${type} | null`;
    }
    if (isBound && !entityClassName) {
        throw new Error(`For bound operations the entity set name needs to be provided: ${name}`);
    }
    type = isBound
        ? wrapRequestBuilderAroundTypeBound(entityClassName, requestBuilderName, parametersTypeName, type)
        : wrapRequestBuilderAroundType(requestBuilderName, parametersTypeName, type);
    return type;
}
exports.operationReturnType = operationReturnType;
function wrapRequestBuilderAroundType(requestBuilderName, parameterName, type) {
    return `${requestBuilderName}<DeSerializersT, ${parameterName}<DeSerializersT>, ${type}>`;
}
function wrapRequestBuilderAroundTypeBound(entityName, requestBuilderName, parameterName, type) {
    return `${requestBuilderName}<${entityName}<T>, T, ${parameterName}<T>, ${type}>`;
}
//# sourceMappingURL=return-type.js.map