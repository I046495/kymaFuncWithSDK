"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRequestBuilderArguments = void 0;
const common_1 = require("../edmx-to-vdm/common");
const response_transformer_function_1 = require("./response-transformer-function");
/**
 * @internal
 */
function getRequestBuilderArguments(operation, service) {
    const sharedParameters = [getTransformer(operation), 'params'];
    if (operation.isBound) {
        return [
            'this._entityApi',
            'this',
            `'${operation.originalName}'`,
            ...sharedParameters,
            'deSerializers || defaultDeSerializers',
            `'${operation.type}'`
        ];
    }
    const params = [
        `'${service.serviceOptions.basePath}'`,
        `'${operation.originalName}'`,
        ...sharedParameters,
        'deSerializers'
    ];
    return service.oDataVersion === 'v4'
        ? [...params, `'${operation.type}'`]
        : [`'${operation.httpMethod}'`, ...params];
}
exports.getRequestBuilderArguments = getRequestBuilderArguments;
function getTransformer(operation) {
    if ((0, common_1.cannotDeserialize)(operation.returnType)) {
        return `(data) => throwErrorWhenReturnTypeIsUnionType(data, '${operation.originalName}')`;
    }
    if (operation.returnType.builderFunction) {
        return `(data) => ${(0, response_transformer_function_1.responseTransformerFunctionName)(operation.returnType)}(data, ${operation.returnType.builderFunction})`;
    }
    throw Error(`Cannot build function/action import ${operation.originalName} because the builder function: ${operation.returnType.builderFunction} is missing.`);
}
//# sourceMappingURL=request-builder-arguments.js.map