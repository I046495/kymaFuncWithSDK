"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swaggerPathForEdmx = exports.inputPaths = exports.edmxPaths = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const validFileExtensions = ['.edmx', '.xml'];
/**
 * @internal
 */
function edmxPaths(input) {
    if ((0, fs_1.lstatSync)(input).isDirectory()) {
        return (0, fs_1.readdirSync)(input)
            .map(f => edmxPaths((0, path_1.join)(input.toString(), f)))
            .reduce((prev, curr) => {
            prev.push(...curr);
            return prev;
        }, []);
    }
    return hasEdmxFileExtension(input.toString()) ? [input] : [];
}
exports.edmxPaths = edmxPaths;
/**
 * @internal
 */
function inputPaths(input, useSwagger) {
    return edmxPaths(input).map(edmxPath => {
        if (useSwagger) {
            const swaggerPath = swaggerPathForEdmx(edmxPath);
            if (swaggerPath) {
                return { edmxPath, swaggerPath };
            }
        }
        return { edmxPath };
    });
}
exports.inputPaths = inputPaths;
/**
 * @internal
 */
function swaggerPathForEdmx(edmxPath) {
    const { dir, name } = (0, path_1.parse)(edmxPath.toString());
    const validSwaggerExtensions = ['.json', '.JSON'];
    return validSwaggerExtensions
        .map(ext => (0, path_1.join)(dir, `${name}${ext}`))
        .find(swaggerPath => (0, fs_1.existsSync)(swaggerPath.toString()));
}
exports.swaggerPathForEdmx = swaggerPathForEdmx;
function hasEdmxFileExtension(fileName) {
    return validFileExtensions.includes((0, path_1.extname)(fileName.toLowerCase()));
}
//# sourceMappingURL=input-path-provider.js.map