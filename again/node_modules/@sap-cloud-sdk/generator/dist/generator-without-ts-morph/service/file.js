"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.imports = exports.serviceFile = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const internal_1 = require("@sap-cloud-sdk/generator-common/internal");
const generator_utils_1 = require("../../generator-utils");
const class_1 = require("./class");
/**
 * @internal
 */
function serviceFile(service) {
    return (0, util_1.codeBlock) `${(0, internal_1.serializeImports)(imports(service))}
  
${(0, class_1.serviceBuilder)(service.className, service.oDataVersion)} 
${(0, class_1.serviceClass)(service)}`;
}
exports.serviceFile = serviceFile;
function getImports(service) {
    const operations = service.operations;
    if (!operations.length) {
        return [];
    }
    const names = operations.map(actionFunctionImport => actionFunctionImport.name);
    const parameterNames = operations.map(actionFunctionImport => actionFunctionImport.parametersTypeName);
    return [
        {
            names: [...names, ...parameterNames],
            moduleIdentifier: './operations'
        }
    ];
}
/**
 * @internal
 */
function imports(service) {
    const operations = getImports(service);
    const serviceImports = [
        ...service.entities.map(entity => ({
            names: [`${entity.className}Api`],
            moduleIdentifier: `./${entity.className}Api`
        })),
        ...operations,
        {
            names: ['BigNumber'],
            moduleIdentifier: 'bignumber.js'
        },
        {
            names: service.oDataVersion === 'v2' ? ['Moment'] : ['Moment', 'Duration'],
            moduleIdentifier: 'moment'
        },
        {
            names: [
                'defaultDeSerializers',
                'DeSerializers',
                'DefaultDeSerializers',
                'mergeDefaultDeSerializersWith',
                'Time'
            ],
            moduleIdentifier: `@sap-cloud-sdk/odata-${service.oDataVersion}`
        }
    ];
    if ((0, generator_utils_1.hasEntities)(service)) {
        serviceImports.push({
            names: ['batch', 'changeset'],
            moduleIdentifier: './BatchRequest'
        });
    }
    return serviceImports;
}
exports.imports = imports;
//# sourceMappingURL=file.js.map