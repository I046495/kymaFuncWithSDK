"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.classContent = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const navigation_properties_1 = require("./navigation-properties");
const schema_1 = require("./schema");
const schema_type_1 = require("./schema-type");
/**
 * @internal
 */
function classContent(entity, service) {
    return (0, util_1.codeBlock) `export class ${entity.className}Api<DeSerializersT extends DeSerializers = DefaultDeSerializers> implements 
    EntityApi<
      ${entity.className}<
        DeSerializersT
      >, 
      DeSerializersT
    > {
  public deSerializers: DeSerializersT;

  private constructor(
    deSerializers: DeSerializersT = defaultDeSerializers as any) {
    this.deSerializers = deSerializers;
  }
  
  ${(0, util_1.documentationBlock) `Do not use this method or the constructor directly.
Use the service function as described in the documentation to get an API instance.`}  
  public static _privateFactory<DeSerializersT extends DeSerializers = DefaultDeSerializers>(  deSerializers: DeSerializersT = defaultDeSerializers as any):${entity.className}Api<DeSerializersT> {
    return new ${entity.className}Api(deSerializers)
  }

  ${(0, navigation_properties_1.navigationPropertyFieldsVariable)(entity, service)}

  ${(0, navigation_properties_1.addNavigationPropertyFieldsFunction)(entity, service)}
  
  entityConstructor = ${entity.className};
  
  requestBuilder(): ${entity.className}RequestBuilder<
    DeSerializersT
  > {
    return new ${entity.className}RequestBuilder<DeSerializersT>(this);
  }
  
  entityBuilder(): EntityBuilderType<
    ${entity.className}<
      DeSerializersT
    >,
    DeSerializersT
  > {
    return entityBuilder<${entity.className}<DeSerializersT>, DeSerializersT>(this);
  }

  customField<NullableT extends boolean = false>(
    fieldName: string,
    isNullable: NullableT = false as NullableT
  ): CustomField<
  ${entity.className}<
      DeSerializersT>,
    DeSerializersT,
    NullableT
  > {
    return new CustomField(
      fieldName,
      this.entityConstructor,
      this.deSerializers,
      isNullable
    ) as any;
  }

  private _fieldBuilder?: FieldBuilder<typeof ${entity.className}, DeSerializersT>;
  get fieldBuilder() {
    if(!this._fieldBuilder){
      this._fieldBuilder = new FieldBuilder(${entity.className}, this.deSerializers);
    }
    return this._fieldBuilder;
  }

  private _schema?: ${(0, schema_type_1.getSchemaType)(entity, service)};

  get schema() {
    if (!this._schema) {
      const fieldBuilder = this.fieldBuilder;
      this._schema = ${(0, schema_1.getSchema)(entity)};
    }
  
    return this._schema;
  }
}`;
}
exports.classContent = classContent;
//# sourceMappingURL=class.js.map