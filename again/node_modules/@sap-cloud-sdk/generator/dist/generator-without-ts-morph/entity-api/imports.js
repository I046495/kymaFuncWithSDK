"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeImports = exports.enumTypeImports = exports.externalImports = exports.complexTypeImports = exports.odataImport = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const imports_1 = require("../../imports");
/**
 * @internal
 */
function odataImport(namedImports, odataVersion) {
    return {
        names: (0, util_1.unique)(namedImports),
        moduleIdentifier: odataVersion === 'v2'
            ? '@sap-cloud-sdk/odata-v2'
            : '@sap-cloud-sdk/odata-v4',
        typeOnly: false
    };
}
exports.odataImport = odataImport;
/**
 * @internal
 */
function complexTypeImports(properties) {
    return mergeImports(properties
        .filter(prop => prop.isComplex)
        .map(prop => complexTypeImport(prop)));
}
exports.complexTypeImports = complexTypeImports;
function complexTypeImport(prop) {
    return {
        names: [prop.jsType, ...(prop.isCollection ? [] : [prop.fieldType])],
        moduleIdentifier: `./${prop.jsType}`,
        typeOnly: false
    };
}
/**
 * @internal
 */
function externalImports(properties) {
    return imports_1.potentialExternalImportDeclarations
        .map(([moduleIdentifier, ...names]) => externalImport(properties, moduleIdentifier, names))
        .filter(anImport => anImport.names && anImport.names.length);
}
exports.externalImports = externalImports;
function externalImport(properties, moduleIdentifier, names) {
    return {
        moduleIdentifier,
        names: names.filter(name => properties.map(prop => prop.jsType).includes(name))
    };
}
/**
 * @internal
 */
function enumTypeImports(properties) {
    return mergeImports(properties.filter(prop => prop.isEnum).map(prop => enumTypeImport(prop)));
}
exports.enumTypeImports = enumTypeImports;
function enumTypeImport(prop) {
    return {
        moduleIdentifier: `./${prop.jsType}`,
        names: [prop.jsType],
        typeOnly: false
    };
}
/**
 * @internal
 */
function mergeImports(imports) {
    return imports
        .reduce((prev, next) => {
        const sameModuleIdentifier = prev.find(declaration => declaration.moduleIdentifier === next.moduleIdentifier &&
            !declaration.typeOnly === !next.typeOnly);
        if (sameModuleIdentifier) {
            sameModuleIdentifier.names = [
                ...sameModuleIdentifier.names,
                ...next.names
            ];
        }
        else {
            prev.push(next);
        }
        return prev;
    }, [])
        .map(anImport => {
        anImport.names = (0, util_1.unique)(anImport.names);
        return anImport;
    })
        .filter(anImport => anImport.names && anImport.names.length);
}
exports.mergeImports = mergeImports;
//# sourceMappingURL=imports.js.map