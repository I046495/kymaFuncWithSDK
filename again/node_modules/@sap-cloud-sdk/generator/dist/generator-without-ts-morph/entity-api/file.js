"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.entityApiFile = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const internal_1 = require("@sap-cloud-sdk/generator-common/internal");
const imports_1 = require("../../imports");
const imports_2 = require("./imports");
const class_1 = require("./class");
/**
 * @internal
 */
function entityApiFile(entity, service) {
    const imports = (0, internal_1.serializeImports)(getImports(entity, service));
    const content = (0, class_1.classContent)(entity, service);
    return [imports, content].join(util_1.unixEOL);
}
exports.entityApiFile = entityApiFile;
// todo Use this function instead the one above, when the todo of "de-serializers.ts" is solved, so that unnecessary external dependencies are not imported.
// export function file(entity: VdmEntity, service: VdmServiceMetadata): string {
//   const imports = serializeImports([...getImports(entity, service), ...externalImports(entity.properties)]);
//   const content = classContent(entity, service);
//   return [
//     imports,
//     content
//   ].join(unixEOL);
// }
function getImports(entity, service) {
    return [
        {
            names: [`${entity.className}`],
            moduleIdentifier: `./${entity.className}`,
            typeOnly: false
        },
        {
            names: [`${entity.className}RequestBuilder`],
            moduleIdentifier: `./${entity.className}RequestBuilder`,
            typeOnly: false
        },
        ...otherEntityApiImports(entity, service),
        ...(0, imports_2.complexTypeImports)(entity.properties),
        ...(0, imports_2.enumTypeImports)(entity.properties),
        (0, imports_2.odataImport)([
            'CustomField',
            'defaultDeSerializers',
            'DefaultDeSerializers',
            'DeSerializers',
            'AllFields',
            'entityBuilder',
            'EntityBuilderType',
            'EntityApi',
            'FieldBuilder',
            ...(0, imports_1.propertyTypeImportNames)(entity.properties),
            ...(0, imports_1.propertyFieldTypeImportNames)(entity.properties),
            ...(0, imports_1.navPropertyFieldTypeImportNames)(entity.navigationProperties, service.oDataVersion)
        ], service.oDataVersion)
    ];
}
function otherEntityApiImports(entity, service) {
    return Array.from(new Set(entity.navigationProperties.map(n => n.to)))
        .map(to => {
        const matchedEntity = service.entities.find(e => e.entitySetName === to);
        if (!matchedEntity) {
            throw Error(`Failed to find the entity from the service: ${JSON.stringify(service)} for entity ${entity}`);
        }
        return matchedEntity.className;
    })
        .filter(name => name !== entity.className)
        .flatMap(name => otherEntityImports(name));
}
function otherEntityImports(name) {
    return [
        {
            names: [`${name}Api`],
            moduleIdentifier: `./${name}Api`
        }
    ];
}
//# sourceMappingURL=file.js.map