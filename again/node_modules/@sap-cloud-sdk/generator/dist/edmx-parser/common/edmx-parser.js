"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMergedPropertyWithNamespace = exports.getPropertyFromEntityContainer = exports.parseEntitySetsBase = exports.parseEntityTypesBase = exports.parseComplexTypesBase = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const generator_utils_1 = require("../../generator-utils");
/**
 * @internal
 */
function parseComplexTypesBase(root) {
    return getMergedPropertyWithNamespace(root, 'ComplexType').map(c => ({
        ...c,
        Property: (0, generator_utils_1.forceArray)(c.Property),
        Namespace: c.Namespace
    }));
}
exports.parseComplexTypesBase = parseComplexTypesBase;
/**
 * @internal
 */
function parseEntityTypesBase(root) {
    return getMergedPropertyWithNamespace(root, 'EntityType').map(e => ({
        ...e,
        Key: {
            PropertyRef: (0, generator_utils_1.forceArray)(e.Key?.PropertyRef)
        },
        NavigationProperty: (0, generator_utils_1.forceArray)(e.NavigationProperty),
        Property: (0, generator_utils_1.forceArray)(e.Property),
        Namespace: e.Namespace
    }));
}
exports.parseEntityTypesBase = parseEntityTypesBase;
/**
 * @internal
 */
function parseEntitySetsBase(root) {
    return getPropertyFromEntityContainer(root, 'EntitySet');
}
exports.parseEntitySetsBase = parseEntitySetsBase;
/**
 * @internal
 */
function getPropertyFromEntityContainer(schema, entityContainerProperty) {
    return (0, util_1.flat)((0, generator_utils_1.forceArray)(schema)
        .filter(s => s.EntityContainer)
        .map(s => (0, generator_utils_1.forceArray)(s['EntityContainer'][entityContainerProperty]).map(p => addNamespace(p, schema.Namespace))));
}
exports.getPropertyFromEntityContainer = getPropertyFromEntityContainer;
function addNamespace(obj, namespace) {
    const Namespace = Array.isArray(namespace) ? namespace[0] : namespace;
    return { ...obj, Namespace };
}
/**
 * Merge a property defined in one or more schemas and add the namespace information
 * @param root - One or more schemas
 * @param property - The property that will be merged
 * @returns A collection containing the merged property
 * @internal
 */
function getMergedPropertyWithNamespace(root, property) {
    return (0, util_1.flat)((0, generator_utils_1.forceArray)(root).map(s => 
    // If the property has a namespace take it over the higher level schema namespace
    (0, generator_utils_1.forceArray)(s[property]).map(p => addNamespace(p, p.Namespace || s.Namespace))));
}
exports.getMergedPropertyWithNamespace = getMergedPropertyWithNamespace;
//# sourceMappingURL=edmx-parser.js.map