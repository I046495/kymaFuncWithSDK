"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readEdmxAndSwaggerFile = exports.readEdmxFile = void 0;
const fs_1 = require("fs");
const path_1 = __importStar(require("path"));
const fast_xml_parser_1 = require("fast-xml-parser");
const util_1 = require("@sap-cloud-sdk/util");
const generator_utils_1 = require("../generator-utils");
const swagger_parser_1 = require("../swagger-parser");
const common_1 = require("./common");
function parseMetadata(root, oDataVersion, edmxPath) {
    return {
        path: edmxPath,
        oDataVersion,
        fileName: (0, util_1.removeFileExtension)((0, path_1.basename)(edmxPath.toString())),
        namespaces: (0, generator_utils_1.forceArray)(root).map(schema => schema.Namespace),
        selfLink: parseLink(root),
        root
    };
}
/**
 * @internal
 */
function readEdmxFile(edmxPath) {
    const edmxFile = (0, fs_1.readFileSync)(path_1.default.resolve(edmxPath.toString()), {
        encoding: 'utf-8'
    });
    return parseEdmxFile(edmxFile, edmxPath);
}
exports.readEdmxFile = readEdmxFile;
function parseEdmxFile(edmx, edmxPath) {
    const parsedEdmx = new fast_xml_parser_1.XMLParser({
        ignoreAttributes: false,
        attributeNamePrefix: ''
    }).parse(edmx);
    const root = getRoot(parsedEdmx);
    return parseMetadata(root, getODataVersion(parsedEdmx), edmxPath);
}
function getODataVersion(edmx) {
    return edmx['edmx:Edmx'].Version === '4.0' ? 'v4' : 'v2';
}
function getRoot(edmx) {
    const schema = edmx['edmx:Edmx']['edmx:DataServices'].Schema;
    return (0, generator_utils_1.forceArray)(schema);
}
function parseLink(root) {
    const links = (0, common_1.getMergedPropertyWithNamespace)(root, 'atom:link');
    const selfLink = links.find(link => link.rel === 'self');
    if (selfLink) {
        return selfLink.href;
    }
}
/**
 * @internal
 */
function readEdmxAndSwaggerFile(edmxServiceSpecPath) {
    const serviceMetadata = {
        edmx: readEdmxFile(edmxServiceSpecPath)
    };
    const { dir, name } = (0, path_1.parse)(edmxServiceSpecPath);
    const files = (0, fs_1.readdirSync)(dir);
    files.forEach(file => {
        if (name + '.json' === file || name + '.JSON' === file) {
            serviceMetadata.swagger = (0, swagger_parser_1.readSwaggerFile)((0, path_1.join)(dir, file));
        }
    });
    return serviceMetadata;
}
exports.readEdmxAndSwaggerFile = readEdmxAndSwaggerFile;
//# sourceMappingURL=edmx-file-reader.js.map