"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.changesetFunction = exports.batchFunction = void 0;
const ts_morph_1 = require("ts-morph");
const typedoc_1 = require("../typedoc");
/**
 * @internal
 */
function batchFunction(service) {
    const type = getBatchParameterType(service);
    const docs = [
        (0, typedoc_1.addLeadingNewline)((0, typedoc_1.getFunctionDoc)(`Batch builder for operations supported on the ${service.speakingModuleName}.`, {
            params: [
                {
                    name: 'requests',
                    type: 'MethodRequestBuilderBase<ODataRequestConfig>[]',
                    description: 'The requests of the batch'
                }
            ],
            returns: {
                type: 'ODataBatchRequestBuilder ',
                description: 'A request builder for batch.'
            }
        }))
    ];
    const overloads = [
        {
            kind: ts_morph_1.StructureKind.FunctionOverload,
            parameters: [{ name: '...requests', type: asArray(type) }],
            returnType: 'ODataBatchRequestBuilder<DeSerializersT>',
            docs
        },
        {
            kind: ts_morph_1.StructureKind.FunctionOverload,
            parameters: [{ name: 'requests', type: asArray(type) }],
            returnType: 'ODataBatchRequestBuilder<DeSerializersT>'
        }
    ];
    return {
        kind: ts_morph_1.StructureKind.Function,
        name: 'batch<DeSerializersT extends DeSerializers>',
        isExported: true,
        parameters: [
            { name: 'first', type: `undefined|${type}|${asArray(type)}` },
            { name: '...rest', type: asArray(type) }
        ],
        returnType: 'ODataBatchRequestBuilder<DeSerializersT>',
        statements: `return new ODataBatchRequestBuilder(
      default${service.className}Path,
      transformVariadicArgumentToArray(first,rest)
    );`,
        overloads
    };
}
exports.batchFunction = batchFunction;
/**
 * @internal
 */
function changesetFunction(service) {
    const type = `Write${service.className}RequestBuilder<DeSerializersT>`;
    const docs = [
        (0, typedoc_1.addLeadingNewline)((0, typedoc_1.getFunctionDoc)(`Change set constructor consists of write operations supported on the ${service.speakingModuleName}.`, {
            params: [
                {
                    name: 'requests',
                    type: `Write${service.className}RequestBuilder[]`,
                    description: 'The requests of the change set'
                }
            ],
            returns: {
                type: 'BatchChangeSet',
                description: 'A change set for batch.'
            }
        }))
    ];
    const overloads = [
        {
            kind: ts_morph_1.StructureKind.FunctionOverload,
            parameters: [{ name: '...requests', type: asArray(type) }],
            returnType: 'BatchChangeSet<DeSerializersT>',
            docs
        },
        {
            kind: ts_morph_1.StructureKind.FunctionOverload,
            parameters: [{ name: 'requests', type: asArray(type) }],
            returnType: 'BatchChangeSet<DeSerializersT>'
        }
    ];
    return {
        kind: ts_morph_1.StructureKind.Function,
        name: 'changeset<DeSerializersT extends DeSerializers>',
        isExported: true,
        parameters: [
            { name: 'first', type: `undefined|${type}|${asArray(type)}` },
            { name: '...rest', type: asArray(type) }
        ],
        returnType: 'BatchChangeSet<DeSerializersT>',
        statements: 'return new BatchChangeSet(transformVariadicArgumentToArray(first,rest));',
        overloads
    };
}
exports.changesetFunction = changesetFunction;
function asArray(type) {
    return `Array<${type}>`;
}
function getBatchParameterType(service) {
    return `Read${service.className}RequestBuilder<DeSerializersT> | BatchChangeSet<DeSerializersT>`;
}
//# sourceMappingURL=function.js.map