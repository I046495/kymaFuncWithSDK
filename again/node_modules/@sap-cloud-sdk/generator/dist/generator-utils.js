"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasEntities = exports.cloudSdkVdmHack = exports.prefixString = exports.getGenericParameters = exports.linkClass = exports.endWithDot = exports.ensureString = exports.forceArray = exports.edmToComplexPropertyType = exports.edmToFieldType = exports.edmToTsType = exports.getFallbackEdmTypeIfNeeded = exports.isNullableParameter = exports.isNullableProperty = exports.isFilterable = exports.isSortable = exports.isCreatable = exports.isUpdatable = exports.isDeletable = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const logger = (0, util_1.createLogger)({
    package: 'generator',
    messageContext: 'generator-utils'
});
function hasCapability(object, capability) {
    return !(capability in object) || object[capability] === 'true';
}
/**
 * Checks if the `sap:deletable` property is present on the given input.
 * @param entity - Object to be checked.
 * @returns `true` if the property `sap:deletable` has the value 'true' or is not present in the object.
 * @internal
 */
function isDeletable(entity) {
    return hasCapability(entity, 'sap:deletable');
}
exports.isDeletable = isDeletable;
/**
 * Checks if the `sap:updatable` property is present on the given input.
 * @param entity - Object to be checked.
 * @returns `true` if the property `sap:updatable` has the value 'true' or is not present in the object.
 * @internal
 */
function isUpdatable(entity) {
    return hasCapability(entity, 'sap:updatable');
}
exports.isUpdatable = isUpdatable;
/**
 * Checks if the `sap:creatable` property is present on the given input.
 * @param entity - Object to be checked.
 * @returns `true` if the property `sap:creatable` has the value 'true' or is not present in the object.
 * @internal
 */
function isCreatable(entity) {
    return hasCapability(entity, 'sap:creatable');
}
exports.isCreatable = isCreatable;
/**
 * Checks if the `sap:sortable` property is present on the given input.
 * @param property - Object to be checked.
 * @returns `true` if the property `sap:sortable` has the value 'true' or is not present in the object.
 * @internal
 */
function isSortable(property) {
    return hasCapability(property, 'sap:sortable');
}
exports.isSortable = isSortable;
/**
 * Checks if the `sap:filterable` property is present on the given input.
 * @param property - Object to be checked.
 * @returns `true` if the property `sap:filterable` has the value 'true' or is not present in the object.
 * @internal
 */
function isFilterable(property) {
    return hasCapability(property, 'sap:filterable');
}
exports.isFilterable = isFilterable;
/**
 * Checks if the `Nullable` property is present on the given input.
 * @param property - Object to be checked.
 * @returns `true` if the property `Nullable` has the value 'true' or is not present in the object.
 * @internal
 */
function isNullableProperty(property) {
    return hasCapability(property, 'Nullable');
}
exports.isNullableProperty = isNullableProperty;
/**
 * Checks if the 'Nullable' property is present on the given input.
 * @param parameter - Object to be checked.
 * @returns `false` if the property `Nullable` has the value 'false' or is not present in the object.
 * @internal
 */
function isNullableParameter(parameter) {
    return !!parameter['Nullable'] && parameter['Nullable'] !== 'false';
}
exports.isNullableParameter = isNullableParameter;
const edmToTsTypeMapping = {
    'Edm.String': 'string',
    'Edm.Boolean': 'boolean',
    'Edm.Guid': 'string',
    'Edm.Decimal': 'BigNumber',
    'Edm.Int16': 'number',
    'Edm.Int32': 'number',
    'Edm.Int64': 'BigNumber',
    'Edm.Single': 'number',
    'Edm.Double': 'number',
    'Edm.Float': 'number',
    'Edm.Byte': 'number',
    'Edm.SByte': 'number',
    'Edm.DateTimeOffset': 'Moment',
    'Edm.Binary': 'string',
    'Edm.Any': 'any',
    // OData v2 specific
    'Edm.DateTime': 'Moment',
    'Edm.Time': 'Time',
    // OData v4 specific
    'Edm.Date': 'Moment',
    'Edm.Duration': 'Duration',
    'Edm.TimeOfDay': 'Time'
};
const edmToFieldTypeMapping = {
    'Edm.String': 'OrderableEdmTypeField',
    'Edm.Boolean': 'OrderableEdmTypeField',
    'Edm.Guid': 'OrderableEdmTypeField',
    'Edm.Decimal': 'OrderableEdmTypeField',
    'Edm.Int16': 'OrderableEdmTypeField',
    'Edm.Int32': 'OrderableEdmTypeField',
    'Edm.Int64': 'OrderableEdmTypeField',
    'Edm.Single': 'OrderableEdmTypeField',
    'Edm.Double': 'OrderableEdmTypeField',
    'Edm.Float': 'OrderableEdmTypeField',
    'Edm.Byte': 'OrderableEdmTypeField',
    'Edm.SByte': 'OrderableEdmTypeField',
    'Edm.DateTimeOffset': 'OrderableEdmTypeField',
    'Edm.Binary': 'EdmTypeField',
    'Edm.Any': 'EdmTypeField',
    // OData v2 specific
    'Edm.DateTime': 'OrderableEdmTypeField',
    'Edm.Time': 'OrderableEdmTypeField',
    // OData v4 specific
    'Edm.Date': 'OrderableEdmTypeField',
    'Edm.Duration': 'OrderableEdmTypeField',
    'Edm.TimeOfDay': 'OrderableEdmTypeField',
    'Edm.Enum': 'EdmTypeField'
};
/**
 * @internal
 */
function getFallbackEdmTypeIfNeeded(edmType) {
    if (edmType in edmToTsTypeMapping) {
        return edmType;
    }
    logger.warn(`The EDM type '${edmType}' is unknown or not supported by the SAP Cloud SDK. Using "any" as fallback.`);
    return 'Edm.Any';
}
exports.getFallbackEdmTypeIfNeeded = getFallbackEdmTypeIfNeeded;
/**
 * @internal
 */
function edmToTsType(edmType) {
    const tsType = edmToTsTypeMapping[edmType];
    if (!tsType) {
        throw new Error(`Could not determine TypeScript type for EDM type: '${edmType}'.`);
    }
    return tsType;
}
exports.edmToTsType = edmToTsType;
/**
 * @internal
 */
function edmToFieldType(edmType) {
    const fieldType = edmToFieldTypeMapping[edmType];
    if (!fieldType) {
        throw new Error(`Could not determine field type for EDM type: '${edmType}'.`);
    }
    return fieldType;
}
exports.edmToFieldType = edmToFieldType;
/**
 * @internal
 */
function edmToComplexPropertyType(edmType) {
    const fieldType = edmToFieldType(edmType);
    if (!fieldType) {
        throw new Error(`Could not determine complex field type for EDM type: '${edmType}'.`);
    }
    return fieldType;
}
exports.edmToComplexPropertyType = edmToComplexPropertyType;
/**
 * @internal
 */
function forceArray(obj) {
    if (!obj) {
        return [];
    }
    if (!(obj instanceof Array)) {
        return [obj];
    }
    return obj;
}
exports.forceArray = forceArray;
/**
 * @internal
 */
function ensureString(obj) {
    if (typeof obj === 'undefined' || obj === null) {
        return '';
    }
    if (typeof obj === 'string') {
        return obj;
    }
    return `${obj}`;
}
exports.ensureString = ensureString;
/**
 * @internal
 */
function endWithDot(text) {
    return !text || text.endsWith('.') || text.endsWith(':') ? text : `${text}.`;
}
exports.endWithDot = endWithDot;
/**
 * @internal
 */
function linkClass(navProperty, oDataVersion) {
    return navProperty.isCollection
        ? oDataVersion === 'v4'
            ? 'OneToManyLink'
            : 'Link'
        : 'OneToOneLink';
}
exports.linkClass = linkClass;
/**
 * @internal
 */
function getGenericParameters(entityClassName, prop, isSelectable) {
    const params = [entityClassName, 'DeSerializersT'];
    if (prop.isCollection) {
        if (prop.isEnum) {
            params.push(`typeof ${prop.jsType}`);
        }
        else if (prop.isComplex) {
            params.push(prop.jsType);
        }
        else {
            params.push(`'${prop.edmType}'`);
        }
    }
    else {
        if (prop.isEnum) {
            params.push(`${prop.jsType}`);
        }
        else if (prop.isComplex) {
            // prettier-ignore
        }
        else {
            params.push(`'${prop.edmType}'`);
        }
    }
    params.push(prop.nullable.toString());
    params.push(isSelectable.toString());
    return params.join(', ');
}
exports.getGenericParameters = getGenericParameters;
/**
 * Applies a prefix to a string if present.
 * @param string - The string to be prefixed.
 * @param prefix - The optional prefix.
 * @returns Prefixed string.
 * @internal
 */
function prefixString(string, prefix) {
    return prefix ? `${prefix}${string}` : string;
}
exports.prefixString = prefixString;
// We use this function to still be able to generate the "cloud-sdk-vdm" package, even though the prefix + name logic does not allow it normally
/**
 * @internal
 */
function cloudSdkVdmHack(name) {
    return name === '@sap/cloud-sdk-vdm-' ? name.slice(0, -1) : name;
}
exports.cloudSdkVdmHack = cloudSdkVdmHack;
/**
 * @internal
 */
function hasEntities(service) {
    return !!service.entities?.length;
}
exports.hasEntities = hasEntities;
//# sourceMappingURL=generator-utils.js.map