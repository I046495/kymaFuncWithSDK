"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enumDocs = exports.getLookupDescription = exports.getRequestBuilderDescription = exports.getEntityDescription = exports.getStaticNavPropertyDescription = exports.getStaticPropertyDescription = exports.getComplexTypePropertyDescription = exports.getNavPropertyDescription = exports.addLeadingNewline = exports.getPropertyDescription = exports.getComplexTypeFieldDescription = exports.getFunctionDoc = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const generator_utils_1 = require("./generator-utils");
const service_generator_1 = require("./service-generator");
/**
 * @internal
 */
function getFunctionDoc(description, tags) {
    if (tags) {
        if (tags.typeparams) {
            tags.typeparams.forEach(typeparam => {
                description += tagToText('typeParam', `${typeparam.type} ${typeparam.description}`);
            });
        }
        if (tags.params && tags.params.length) {
            tags.params.forEach(param => {
                description += tagToText('param', `${param.name} ${param.description}`);
            });
        }
        if (tags.returns) {
            description += tagToText('returns', `${tags.returns.description}`);
        }
    }
    return description;
}
exports.getFunctionDoc = getFunctionDoc;
/**
 * @internal
 */
function getComplexTypeFieldDescription(complexType) {
    return `${complexType.fieldType}${util_1.unixEOL}@typeParam EntityT - Type of the entity the complex type field belongs to.`;
}
exports.getComplexTypeFieldDescription = getComplexTypeFieldDescription;
/**
 * @internal
 */
function getPropertyDescription(property, constraints = { nullable: false }) {
    return addConstraints(property.description ||
        (0, generator_utils_1.endWithDot)((0, util_1.titleFormat)(property.instancePropertyName).trim()), constraints);
}
exports.getPropertyDescription = getPropertyDescription;
/**
 * Adds a leading `\n` to a documentation string so that the ts-morph makes a block comment out of it.
 * @param documentation - Documentation text.
 * @returns Documentation text with leading `\n`.
 * @internal
 */
function addLeadingNewline(documentation) {
    if (!documentation.startsWith(util_1.unixEOL)) {
        return util_1.unixEOL + documentation;
    }
    return documentation;
}
exports.addLeadingNewline = addLeadingNewline;
/**
 * @internal
 */
function getNavPropertyDescription(property) {
    return `${property.isCollection ? 'One-to-many' : 'One-to-one'} navigation property to the {@link ${property.toEntityClassName}} entity.`.trim();
}
exports.getNavPropertyDescription = getNavPropertyDescription;
/**
 * @internal
 */
function getComplexTypePropertyDescription(property, complexTypeName) {
    return `Representation of the {@link ${complexTypeName}.${property.instancePropertyName}} property for query construction.${util_1.unixEOL}Use to reference this property in query operations such as 'filter' in the fluent request API.`;
}
exports.getComplexTypePropertyDescription = getComplexTypePropertyDescription;
/**
 * @internal
 */
function getStaticPropertyDescription(property) {
    return `Static representation of the {@link ${property.instancePropertyName}} property for query construction.${util_1.unixEOL}Use to reference this property in query operations such as 'select' in the fluent request API.`;
}
exports.getStaticPropertyDescription = getStaticPropertyDescription;
/**
 * @internal
 */
function getStaticNavPropertyDescription(property) {
    return `Static representation of the ${property.isCollection ? 'one-to-many' : 'one-to-one'} navigation property {@link ${property.instancePropertyName}} for query construction.${util_1.unixEOL}Use to reference this property in query operations such as 'select' in the fluent request API.`;
}
exports.getStaticNavPropertyDescription = getStaticNavPropertyDescription;
/**
 * @internal
 */
function getEntityDescription(entity, service) {
    let description = entityDescription(entity.entitySetName, (0, service_generator_1.getServiceName)(service));
    if (service.apiBusinessHubMetadata &&
        service.apiBusinessHubMetadata.communicationScenario) {
        description = partOfCommunicationScenarios(service.apiBusinessHubMetadata.communicationScenario);
    }
    if (service.apiBusinessHubMetadata) {
        description = seeForMoreInformation(service.apiBusinessHubMetadata.url);
    }
    return description;
}
exports.getEntityDescription = getEntityDescription;
const entityDescription = (entitySetName, speakingModuleName) => `This class represents the entity "${entitySetName}" of service "${speakingModuleName}".`;
const seeForMoreInformation = (url) => `See ${url} for more information.`;
const partOfCommunicationScenarios = (communicationScenarios) => `This service is part of the following communication scenarios: ${communicationScenarios}.`;
/**
 * @internal
 */
function getRequestBuilderDescription(entity) {
    return `Request builder class for operations supported on the {@link ${entity.className}} entity.`;
}
exports.getRequestBuilderDescription = getRequestBuilderDescription;
/**
 * @internal
 */
function getLookupDescription(service) {
    return `Lookup class for finding the constructor for an entity of the {@link ${service.className}} service.`;
}
exports.getLookupDescription = getLookupDescription;
function addConstraints(description, constraints) {
    if (constraints.maxLength) {
        description += `${util_1.unixEOL}Maximum length: ${constraints.maxLength}.`;
    }
    if (constraints.nullable) {
        description += `${util_1.unixEOL}@nullable`;
    }
    return description;
}
function tagToText(tag, description = '') {
    return `${util_1.unixEOL}@${tag}` + (description ? ` ${description}` : '');
}
/**
 * @internal
 */
function enumDocs(enumType) {
    return [
        `This enum represents the enum type "{@link ${enumType.originalName}}".`,
        `The members represent values of EDM type ${enumType.underlyingType}.`
    ].join(`${util_1.unixEOL}`);
}
exports.enumDocs = enumDocs;
//# sourceMappingURL=typedoc.js.map