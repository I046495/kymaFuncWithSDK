"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOperationParams = exports.getOperationWithMinParameters = exports.getOperationWithoutParameters = exports.sampleOperation = exports.getShortestNameEntity = exports.getODataEntity = void 0;
const internal_1 = require("@sap-cloud-sdk/generator-common/internal");
/**
 * @internal
 */
function getODataEntity(serviceName, vdmEntities) {
    return ((0, internal_1.getLevenshteinClosest)(serviceName, vdmEntities, x => x.className) ||
        getShortestNameEntity(vdmEntities));
}
exports.getODataEntity = getODataEntity;
/**
 * @internal
 */
function getShortestNameEntity(vdmEntities) {
    // If no closest entity found, return the entity with shortest name
    return vdmEntities.sort((a, b) => a.className.length < b.className.length ? -1 : 1)[0];
}
exports.getShortestNameEntity = getShortestNameEntity;
/**
 * @internal
 */
function sampleOperation(serviceName, operations) {
    if (operations.length === 1) {
        return operations[0];
    }
    return ((0, internal_1.getLevenshteinClosest)(serviceName, operations, x => x.name) ||
        getOperationWithoutParameters(operations) ||
        getOperationWithMinParameters(operations));
}
exports.sampleOperation = sampleOperation;
/**
 * @internal
 */
function getOperationWithoutParameters(operations) {
    return operations.find(func => func.parameters?.length === 0);
}
exports.getOperationWithoutParameters = getOperationWithoutParameters;
/**
 * Sorts and gets a function or action import having minimum input parameters.
 * @param operations - function or action imports array
 * @returns Function or action containing minimum input parameters
 * @internal
 */
function getOperationWithMinParameters(operations) {
    const getOperations = operations.filter(func => func.httpMethod?.toLowerCase() === 'get');
    if (getOperations.length) {
        operations = getOperations;
    }
    const sortedOperations = operations.sort((funcA, funcB) => funcA.parameters?.length < funcB.parameters?.length ? -1 : 1);
    return sortedOperations[0];
}
exports.getOperationWithMinParameters = getOperationWithMinParameters;
/**
 * @internal
 */
function getOperationParams(parameters) {
    const paramString = parameters
        .slice(0, 2)
        .reduce((cumulator, currentParam) => `${cumulator}, ${currentParam.parameterName}: '${currentParam.parameterName}'`, '');
    return `{${paramString.substring(1)}${parameters.length > 2 ? ', ...' : ''} }`;
}
exports.getOperationParams = getOperationParams;
//# sourceMappingURL=code-sample-util.js.map