import { EdmTypeShared } from '../edm-types';
/**
 * Internal representation of operation parameters. It adds metadata to the value.
 * @typeParam ValueT - Type of the value.
 */
export declare class OperationParameter<ValueT> {
    originalName: string;
    edmType: EdmTypeShared<'any'>;
    value: ValueT;
    /**
     * Creates an instance of OperationParameter.
     * @param originalName - The original name of the parameter in the OData service.
     * @param edmType - Original EDM type.
     * @param value - Value to be used as parameter.
     */
    constructor(originalName: string, edmType: EdmTypeShared<'any'>, value: ValueT);
}
/**
 * Internal representation of all parameters of an operation as a map.
 * @typeParam ParametersT - External representation of all parameters
 */
export type OperationParameters<ParametersT> = {
    [K in keyof ParametersT]: OperationParameter<ParametersT[K]>;
};
/**
 * @deprecated Since 3.3.0. Use {@link OperationParameter} instead.
 */
export declare const FunctionImportParameter: typeof OperationParameter;
/**
 * @deprecated Since 3.3.0. Use {@link OperationParameters} instead.
 */
export type FunctionImportParameters<ParametersT> = OperationParameters<ParametersT>;
