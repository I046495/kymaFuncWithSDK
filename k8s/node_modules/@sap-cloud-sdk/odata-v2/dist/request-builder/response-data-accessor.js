"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.responseDataAccessor = exports.getSingleResult = exports.getLinkedCollectionResult = exports.isCollectionResult = exports.getCollectionResult = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const logger = (0, util_1.createLogger)({
    package: 'odata-v2',
    messageContext: 'response-data-accessor'
});
/**
 * Methods to extract the data from OData v2 responses.
 */
/**
 * Extract the collection data from the response.
 * If the data does not contain a collection an empty array is returned.
 * @param data - Response of the OData v2 service
 * @returns any[] - Collection extracted from the response
 *  @internal
 */
function getCollectionResult(data) {
    validateCollectionResult(data);
    return isCollectionResult(data) ? data?.d?.results : [];
}
exports.getCollectionResult = getCollectionResult;
/**
 * Checks if the data contains a collection result.
 * @param data - Response of the OData service.
 * @returns `true`, if the data is a collection result.
 *  @internal
 */
function isCollectionResult(data) {
    return Array.isArray(data?.d?.results);
}
exports.isCollectionResult = isCollectionResult;
function validateCollectionResult(data) {
    if (!isCollectionResult(data)) {
        logger.warn('The given response data does not have the standard OData v2 format for collections.');
    }
}
/**
 * Extract the collection data from the one to many link response.
 * If the data does not contain a collection an empty array is returned.
 * @param data - Response of the one to many link
 * @returns any[] - Collection extracted from the response
 *  @internal
 */
function getLinkedCollectionResult(data) {
    if (Array.isArray(data?.results)) {
        return data.results;
    }
    return Array.isArray(data) ? data : [];
}
exports.getLinkedCollectionResult = getLinkedCollectionResult;
/**
 * Parses the data of a single result.
 * @param data - Response of the OData service.
 * @returns The single result object if existent, an empty object otherwise.
 * @internal
 */
function getSingleResult(data) {
    validateSingleResult(data);
    return isSingleResultAsCollection(data) ? data?.d?.results : data?.d || {};
}
exports.getSingleResult = getSingleResult;
// Workaround to be compatible with services that wrongly implement the OData v2 protocol and serve single responses in the same format as collections
function isSingleResultAsCollection(data) {
    return !!data?.d?.results && !isCollectionResult(data);
}
function validateSingleResult(data) {
    if (isSingleResultAsCollection(data)) {
        logger.warn('The given response data has the format for collections instead of the standard OData v2 format for single results.');
    }
    if (!data?.d) {
        logger.warn('The given response data does not have the standard OData v2 format for single results.');
    }
}
/**
 * @internal
 */
exports.responseDataAccessor = {
    getCollectionResult,
    getLinkedCollectionResult,
    getSingleResult,
    isCollectionResult
};
//# sourceMappingURL=response-data-accessor.js.map